<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Hydra: Head Protocol Blog</title>
        <link>https://input-output-hk.github.io/hydra-poc/adr</link>
        <description>Hydra: Head Protocol Blog</description>
        <lastBuildDate>Sat, 05 Jun 2021 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[1. Record Architecture Decisions
]]></title>
            <link>https://input-output-hk.github.io/hydra-poc/adr/1</link>
            <guid>1</guid>
            <pubDate>Sat, 05 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="status">Status<a class="hash-link" href="#status" title="Direct link to heading">​</a></h2><p>Accepted</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="context">Context<a class="hash-link" href="#context" title="Direct link to heading">​</a></h2><p>We are in search for a means to describe our technical architecture.</p><p>We are a small team working in a very lean and agile way (XP), so we naturally
prefer also light-weight documentation methods which also accomodate change
easily.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="decision">Decision<a class="hash-link" href="#decision" title="Direct link to heading">​</a></h2><ul><li>We will use <em>Architecture Decision Records</em>, as described by Michael Nygard in
this
<a href="http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions" target="_blank" rel="noopener noreferrer">article</a>.</li><li>We will follow the convention of storing those ADRs as Markdown formatted
documents stored under <code>docs/adr</code> directory, as exemplified in Nat Pryce's
<a href="https://github.com/npryce/adr-tools" target="_blank" rel="noopener noreferrer">adr-tools</a>. This does not imply we will
be using <code>adr-tools</code> itself.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="consequences">Consequences<a class="hash-link" href="#consequences" title="Direct link to heading">​</a></h2><p>See Michael Nygard's article, linked above.</p>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[2. Reactive Core
]]></title>
            <link>https://input-output-hk.github.io/hydra-poc/adr/2</link>
            <guid>2</guid>
            <pubDate>Sun, 06 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="status">Status<a class="hash-link" href="#status" title="Direct link to heading">​</a></h2><p>Accepted</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="context">Context<a class="hash-link" href="#context" title="Direct link to heading">​</a></h2><p>We are looking for a way of expressing the Hydra Head protocol logic in a Hydra node.</p><p>The Hydra Head protocol is defined as a <em>State machine</em> in the paper, whose transitions are inputs that come from different sources which can emit outputs to other instances of the state machine or the mainchain. See the <a href="https://iohk.io/en/research/library/papers/hydrafast-isomorphic-state-channels/" target="_blank" rel="noopener noreferrer">FC2021</a> paper for details</p><p>It should also be easy to review / feed-back to researchers.</p><p>We are familiar with React's <a href="https://react-redux.js.org/" target="_blank" rel="noopener noreferrer">redux</a> way of structuring applications, which in turn is inspired by <a href="https://guide.elm-lang.org/architecture/" target="_blank" rel="noopener noreferrer">The Elm Architecture</a> which itself is a simplification of <a href="https://en.wikipedia.org/wiki/Functional_reactive_programming" target="_blank" rel="noopener noreferrer">Functional Reactive Programming</a> principles.</p><p>We have experienced benefits with <em>Event Sourcing</em> in the domain of persistence in the past</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="decision">Decision<a class="hash-link" href="#decision" title="Direct link to heading">​</a></h2><p>Implements the Hydra Head core logic as a <em>loop</em> that:</p><ol><li>Consumes <em>input events</em> from an event <em>queue</em>,</li><li>Applies each <em>event</em> to the current <em>state</em> yielding potentially an <em>updated state</em> and a sequence of <em>effects</em>,</li><li>Execute all <em>effects</em>.</li></ol><h2 class="anchor anchorWithStickyNavbar_mojV" id="consequences">Consequences<a class="hash-link" href="#consequences" title="Direct link to heading">​</a></h2><p>The internal state is only ever changed through <em>Events</em>.</p><p>The core state machine <em>transition</em> function <em>is pure</em> and reviewing it requires minimal Haskell knowledge.</p><p>Side-effects are all handled at the level of the <code>Node</code>.</p>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[3. Asynchronous Duplex Client API]]></title>
            <link>https://input-output-hk.github.io/hydra-poc/adr/3</link>
            <guid>3</guid>
            <pubDate>Mon, 07 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="status">Status<a class="hash-link" href="#status" title="Direct link to heading">​</a></h2><p>Accepted</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="context">Context<a class="hash-link" href="#context" title="Direct link to heading">​</a></h2><p>The <a href="/hydra-poc/adr/2"><em>reactive</em> nature of the Hydra node</a> means that
clients produce a <em>stream</em> of <em>inputs</em> to a node which in turns issues a stream
of <em>outputs</em> representing the outcome of previous inputs or resulting from
interaction with peers in the network.</p><p>For example, a client may send a <em>command</em> as <em>input</em>, upon which the node might
do something. When that something is finished, a <em>output</em> does indicate that.
However, there might also be an <em>output</em> emitted to the client when another peer
interacted with "our" node.</p><p>Queries, messages by clients which do only fetch information from the node, are
not in scope of this ADR.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="decision">Decision<a class="hash-link" href="#decision" title="Direct link to heading">​</a></h2><ul><li>We use a single, full-duplex communication channel per client connected to a Hydra node</li><li>This is implemented using a simple <a href="https://datatracker.ietf.org/doc/html/rfc6455" target="_blank" rel="noopener noreferrer">Websocket</a> with messages corresponding to <code>Input</code>s and <code>Output</code>s.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="consequences">Consequences<a class="hash-link" href="#consequences" title="Direct link to heading">​</a></h2><ul><li>Clients needing a synchronous API need to implement it on top</li><li>Clients can receive <em>outputs</em> decorrelated from any <em>inputs</em> and at any time</li></ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[4. Use Handle to model Effects
]]></title>
            <link>https://input-output-hk.github.io/hydra-poc/adr/4</link>
            <guid>4</guid>
            <pubDate>Tue, 08 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="status">Status<a class="hash-link" href="#status" title="Direct link to heading">​</a></h2><p>Accepted</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="context">Context<a class="hash-link" href="#context" title="Direct link to heading">​</a></h2><p>Given we are structuring Hydra node as a <a href="/hydra-poc/adr/2">reactive core</a> we need a way to ensure a strict separation of pure and impure (or effectful) code.</p><p>We want to be able to test those impure/effectful parts of the code. This requires a means for exchanging the actual implementation for e.g. the function to send messages over a network.</p><p>Also we want the ability to swap implementations not only for testing, but also be able
to accommodate different usage scenarios, e.g. use a different middleware
depending on peer configuration.</p><p>In Haskell there are various common <em>patterns</em> to model effects:</p><ul><li><a href="http://okmij.org/ftp/tagless-final/index.html" target="_blank" rel="noopener noreferrer">Tagless final encoding</a> also known as <em>MTL-style</em> although using typeclasses to implement is <a href="https://www.foxhound.systems/blog/final-tagless/" target="_blank" rel="noopener noreferrer">not necessary</a>, whereby Effect(s) are expressed as typeclass(es) which are propagated as constraints</li><li><a href="https://reasonablypolymorphic.com/blog/freer-monads/" target="_blank" rel="noopener noreferrer">Free monads</a>, or any variant thereof like Eff, freer, extensible-effects, whereby effect(s) are expressed as ADTs which are <em>interpreted</em> in the context of an <em>Effect stack</em></li><li><a href="https://jaspervdj.be/posts/2018-03-08-handle-pattern.html" target="_blank" rel="noopener noreferrer">Handle</a> pattern also known as <em>record-of-functions</em> whereby effects are grouped together in a datatype with a single record constructor</li></ul><p>(These tradeoffs also appear in other functional languages like
<a href="https://medium.com/@dogwith1eye/prefer-records-of-functions-to-interfaces-d6413af4d2c3" target="_blank" rel="noopener noreferrer">F#</a>)</p><p>There is not one most favored solution though and we all have various
experiences with these techniques.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="decision">Decision<a class="hash-link" href="#decision" title="Direct link to heading">​</a></h2><p>Effectful components of the Hydra node (our code) will be defined using the <em>Handle pattern</em>.</p><p>There might be other techniques in use because of libraries used etc.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="consequences">Consequences<a class="hash-link" href="#consequences" title="Direct link to heading">​</a></h2><p>For example, the network component is defined as:</p><div class="codeBlockContainer_I0IT language-hs theme-code-block"><div class="codeBlockContent_wNvx hs"><pre tabindex="0" class="prism-code language-hs codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">newtype Network m = Network</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  { broadcast :: MonadThrow m =&gt; HydraMessage -&gt; m ()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>There might be multiple <code>createNetwork :: m (Network m)</code> functions</p>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[5. Use io-classes
]]></title>
            <link>https://input-output-hk.github.io/hydra-poc/adr/5</link>
            <guid>5</guid>
            <pubDate>Wed, 09 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="status">Status<a class="hash-link" href="#status" title="Direct link to heading">​</a></h2><p>Accepted</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="context">Context<a class="hash-link" href="#context" title="Direct link to heading">​</a></h2><p>Although we try to contain the use of IO at the outskirt of the Hydra node using <a href="/hydra-poc/adr/4">Handle pattern</a> and <a href="/hydra-poc/adr/2">Reactive core</a>, low-level effects are still needed in various places, notably to define concurrently executing actions, and thus need to be tested</p><p>Testing asynchronous and concurrent code is notoriously painful</p><p>The ouroboros consensus test suite and <a href="https://github.com/input-output-hk/hydra-sim" target="_blank" rel="noopener noreferrer">hydra-sim</a> simulation have demonstrated the effectiveness of abstracting concurrent primitives through the use of typeclasses (MTL-style pattern) and being able to run these as pure code, harvesting and analysing produced execution traces.</p><p>There are other such libraries, e.g. <a href="https://hackage.haskell.org/package/concurrency" target="_blank" rel="noopener noreferrer">concurrency</a> and <a href="https://hackage.haskell.org/package/dejafu" target="_blank" rel="noopener noreferrer">dejafu</a>, as well as the venerable <a href="https://hackage.haskell.org/package/exceptions" target="_blank" rel="noopener noreferrer">exceptions</a> (for abstracting exception throwing).</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="decision">Decision<a class="hash-link" href="#decision" title="Direct link to heading">​</a></h2><p>For all IO effects covered by the library, use functions from typeclasses exposed by <a href="https://github.com/input-output-hk/ouroboros-network/tree/e338f2cf8e1078fbda9555dd2b169c6737ef6774/io-classes" target="_blank" rel="noopener noreferrer">io-classes</a>. As of this writing, this covers:</p><ul><li>All STM operations through <code>MonadSTM</code></li><li>Time and timers through <code>MonadTime</code> and <code>MonadTimer</code></li><li>Concurrency through <code>MonadAsync</code>, <code>MonadFork</code></li><li>Exceptions through <code>MonadThrow</code>, <code>MonadCatch</code> and <code>MonadMask</code></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="consequences">Consequences<a class="hash-link" href="#consequences" title="Direct link to heading">​</a></h2><p>We can use <code>io-sim</code> to evaluate IO-ish functions easily</p><p>Instantiation to concrete IO is pushed at the outermost layer, eg. in the <code>Main</code> or tests.</p><p>As some of these functions and typeclasses clash with the
<a href="https://github.com/input-output-hk/cardano-prelude" target="_blank" rel="noopener noreferrer">cardano-prelude</a> we might
want to define a custom prelude (candidate for another ADR)</p>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[6. Network Broadcasts all messages
]]></title>
            <link>https://input-output-hk.github.io/hydra-poc/adr/6</link>
            <guid>6</guid>
            <pubDate>Thu, 10 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="status">Status<a class="hash-link" href="#status" title="Direct link to heading">​</a></h2><p>Accepted</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="context">Context<a class="hash-link" href="#context" title="Direct link to heading">​</a></h2><p>The simplified Head protocol in the <a href="https://iohk.io/en/research/library/papers/hydrafast-isomorphic-state-channels/" target="_blank" rel="noopener noreferrer">Hydra
paper</a>
requires <em>unicast</em> and <em>multicast</em> messaging between participants. However, this
can be simplified to only <em>multicast</em> by also sending <code>AckTx</code> messages to all
participants and removing the necessity for <code>ConfTx</code>.</p><p>There is already a battle-tested implementation for <em>broadcasting</em> messages over
networks with any kind of topology (mesh), namely the
<a href="https://github.com/input-output-hk/ouroboros-network/tree/master/ouroboros-network/src/Ouroboros/Network/TxSubmission" target="_blank" rel="noopener noreferrer">TxSubmission</a>
protocol of <code>ouroroboros-network</code>.</p><p>If the network connects only to interested peers, <em>broadcast</em> is essentially the
<em>multicast</em> required by the protocol. If this is not the case, some addressing
scheme is required and <em>broadcast</em> would be a waste of resources.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="decision">Decision<a class="hash-link" href="#decision" title="Direct link to heading">​</a></h2><ul><li>All messages emitted by a Hydra node through the Network component are <em>broadcasted</em> to <em>all</em> nodes in the network</li><li>This implies the emitter shall itself receive the message</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="consequences">Consequences<a class="hash-link" href="#consequences" title="Direct link to heading">​</a></h2><ul><li>The network layer is responsible for ensuring sent messages effectively
reaches all nodes in the network. How this is achieved is left as an
implementation detail, i.e. whether it uses relaying or not.</li><li>We need to make sure all Head participants are connected to the same network.</li></ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[7. Use with-pattern based component interfaces
]]></title>
            <link>https://input-output-hk.github.io/hydra-poc/adr/7</link>
            <guid>7</guid>
            <pubDate>Fri, 11 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="status">Status<a class="hash-link" href="#status" title="Direct link to heading">​</a></h2><p>Draft</p><p>TBD:</p><ul><li>Naming of <code>Callback</code> and <code>Component</code></li><li>Demonstrate the <code>Covariant</code> consequence</li><li>Provide context about tying the knot</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="context">Context<a class="hash-link" href="#context" title="Direct link to heading">​</a></h2><p>The <em>with pattern</em> or <em>bracket pattern</em> is a functional programming idiom, a
particular instance of <em>Continuation-Passing Style</em>, whereby one component that
controls some resource that is consumed by another component of the system, is
created via a function that takes as argument a function consuming the resource,
instead of returning it. This pattern allows safe reclaiming of resources when
the "wrapped" action terminates, whether normally or unexpectedly.</p><p>TODO "Tying the knot"</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="decision">Decision<a class="hash-link" href="#decision" title="Direct link to heading">​</a></h2><p>We use this pattern to provide interfaces to all <em>active components</em>, which
exchange messages with other components of the system. A prototypical signature
of such a component could be:</p><div class="codeBlockContainer_I0IT language-hs theme-code-block"><div class="codeBlockContent_wNvx hs"><pre tabindex="0" class="prism-code language-hs codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">type Component m = outmsg -&gt; m ()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">type Callback m = inmsg -&gt; m ()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">withXXX :: Callback m -&gt; (Component m -&gt; m a) -&gt; m a</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Note that <code>withXXX</code> can also allocate resources in order to provide <code>Component</code>
or use the <code>Callback</code>, e.g. fork threads which invoke <code>Callback</code>, but also make
sure they are cleaned up.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="consequences">Consequences<a class="hash-link" href="#consequences" title="Direct link to heading">​</a></h2><p>Components can be layered on top of another to provide additional behavior given the same interface. This also similar to "decorating" in the object-orientation world.</p><p>If the <code>Component</code> is agnostic about the messages it consumes/produces, it can be defined as a <a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/Data-Functor-Contravariant.html" target="_blank" rel="noopener noreferrer"><code>Contravariant</code> functor</a> and the <code>Callback</code> part as a (covariant) <code>Functor</code>. This makes it possible to use <code>map</code> and <code>contramap</code> operations to transform messages.</p>]]></content:encoded>
            <category>Draft</category>
        </item>
        <item>
            <title><![CDATA[8. Custom Prelude
]]></title>
            <link>https://input-output-hk.github.io/hydra-poc/adr/8</link>
            <guid>8</guid>
            <pubDate>Fri, 18 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="status">Status<a class="hash-link" href="#status" title="Direct link to heading">​</a></h2><p>Accepted</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="context">Context<a class="hash-link" href="#context" title="Direct link to heading">​</a></h2><p>In a Haskell project, we often get to use and re-use the same libraries and functions. Haskell comes with a default <code>Prelude</code> package with the <code>base</code> library, which provides a good and sensible starting point. However, the base <code>Prelude</code> also comes with a few quirks:</p><ul><li>Many commonly used functions or constructors are not exported by default (e.g. <code>bracket</code>, <code>foldM</code>, <code>first</code>, <code>lift</code>, <code>forM</code>, <code>when</code>, <code>SomeException</code>, <code>Set</code>, <code>&amp;</code> ...etc).</li><li>Many functions in the base Prelude are partial, like <code>head</code> or <code>read</code>. </li><li>Many functions simply happens in plain <code>IO</code>, whereas applications usually try to push IO to the boundary as much as possible (for example, using mtl-style class constraints).</li><li>The interface for I/O operations in the base Prelude is <code>String</code>, which comes with quite major performance hit and often forces to convert back and forth to <code>Text</code> or <code>ByteString</code> equivalents.</li></ul><p>All-in-all, while it <em>does the job</em>, the base <code>Prelude</code> may not necessarily be the most <em>convenient</em> prelude for an active project development. </p><h2 class="anchor anchorWithStickyNavbar_mojV" id="decision">Decision<a class="hash-link" href="#decision" title="Direct link to heading">​</a></h2><p>We'll use a custom prelude to help us get more productive and more importantly, to reduce the daily friction of our interactions with the base prelude. While <a href="https://hackage.haskell.org/package/relude" target="_blank" rel="noopener noreferrer"><code>relude</code></a> makes for a good candidate, we still chose to re-wrap it in a custom <code>Hydra.Prelude</code> module to grant us the ability to add or remove a few things specifics to Hydra and Cardano in general. In particular, we will hide from <code>relude</code> all the re-exports of the <a href="https://hackage.haskell.org/package/stm" target="_blank" rel="noopener noreferrer"><code>stm</code></a> library in favor of <a href="https://github.com/input-output-hk/ouroboros-network/tree/e338f2cf8e1078fbda9555dd2b169c6737ef6774/io-classes" target="_blank" rel="noopener noreferrer"><code>io-classes</code></a> which we already use pervasively and which provides (among other things) most of the same capabilities.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="consequences">Consequences<a class="hash-link" href="#consequences" title="Direct link to heading">​</a></h2><ul><li>Remove uses of 'cardano-prelude' in favor of a new 'hydra-prelude' module.</li><li>Cleaning up of imports from existing file modules.</li><li>Happier feeling day after day from using a developer-friendly prelude.</li><li>Stop loosing time in often re-importing the same functions over and over. </li><li>Have an explicit point for discouraging / blessing usage of one or the other function, as well as documenting such decisions</li></ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[9. Simplify Logging
]]></title>
            <link>https://input-output-hk.github.io/hydra-poc/adr/9</link>
            <guid>9</guid>
            <pubDate>Thu, 19 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="status">Status<a class="hash-link" href="#status" title="Direct link to heading">​</a></h2><p>Proposed</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="context">Context<a class="hash-link" href="#context" title="Direct link to heading">​</a></h2><ul><li>Logs are critical to provide <em>observability</em> to Hydra nodes' operators</li><li>Providing the needed components and tools to be able to configure logging and monitoring to each operator's liking should not be the responibility of the Hydra node, and requires complex machinery that will need to be maintained and evolved</li><li>When a problem occurs in production, if the process is not verbose enough it can be very hard to analyse the problem<ul><li>Enabling dynamic changes of verbosity in logs is both complex to implement and comes too late</li><li>Deciding in the code on what's the right "severity" for a log entry leads to dropping important information on <em>how</em> some error occured</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="decision">Decision<a class="hash-link" href="#decision" title="Direct link to heading">​</a></h2><p><em>Therefore</em></p><p>Hydra node provides a very simplified logging mechanism whereby:</p><ul><li>All logs are emitted as JSON-encoded structures providing some metadata (timestamp, threadId) around well-defined data</li><li>Each <em>log entry</em> is written to the <code>hydra-node</code> process' <em>stdout</em> port, one line per entry</li><li>The definition of the logged items is considered to be part of the public AγPI of the Hydra node</li></ul><p><strong>Note</strong>: Proper redaction of sensitive information contained in log entries should still be handled in the code.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="consequences">Consequences<a class="hash-link" href="#consequences" title="Direct link to heading">​</a></h2><ul><li>The schema of the logged items should be properly documented in a JSON schema, just like we do for client side API</li><li>It is the responsibility of the node operator to consume the logs and process them</li></ul>]]></content:encoded>
            <category>Proposed</category>
        </item>
        <item>
            <title><![CDATA[10. Use Direct Connection to `cardano-node`
]]></title>
            <link>https://input-output-hk.github.io/hydra-poc/adr/10</link>
            <guid>10</guid>
            <pubDate>Sat, 23 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="status">Status<a class="hash-link" href="#status" title="Direct link to heading">​</a></h2><p>Accepted</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="context">Context<a class="hash-link" href="#context" title="Direct link to heading">​</a></h2><ul><li>On-Chain Validation is a critical part of the Hydra protocol, it requires both the ability to <em>submit</em> transactions to the <em>Layer 1</em> chain advancing the state of a Head, and <em>observing</em> those transactions as the <a href="https://github.com/input-output-hk/plutus" target="_blank" rel="noopener noreferrer">Plutus</a> contracts are validated</li><li>The <a href="https://github.com/input-output-hk/plutus-apps" target="_blank" rel="noopener noreferrer">Plutus Application Framework</a> is expected to provide the necessary machinery to allow "Smart Contracts" applications to interact with the chain but it's still under active development and not ready for deployment on-chain</li><li>We want to gather feedback as early as possible and deliver a fully functional Hydra Head node for early adopters to test on a "real" chain (testnet)</li><li>Our experiment connecting directly to a Cardano node has been conclusive. We can:<ul><li>Connect to a node using local protocols,</li><li>Build and submit Head transactions triggering smart contracts validation, and</li><li>Observe transactions using chain-sync protocol.</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="decision">Decision<a class="hash-link" href="#decision" title="Direct link to heading">​</a></h2><p><em>Therefore</em></p><p>For the time being, until <em>Plutus Application Framework</em> is released, we will implement on-chain interaction of Hydra nodes <em>directly</em>, connecting to a Cardano node through a <em>local socket</em>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="consequences">Consequences<a class="hash-link" href="#consequences" title="Direct link to heading">​</a></h2><ul><li>Limit Hydra dependencies to <a href="https://github.com/input-output-hk/plutus" target="_blank" rel="noopener noreferrer">plutus</a> repository</li><li>Remove all PAB-related code as well as off-chain <code>Contract</code>s code and related dependencies</li><li>An updated architecture diagram:</li></ul><p><img loading="lazy" src="/hydra-poc/assets/images/hydra-architecture-direct-f8764611c3938f0155b30eba9f6339f2.jpg" width="3420" height="1827"></p>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[11. Use cardano-api
]]></title>
            <link>https://input-output-hk.github.io/hydra-poc/adr/11</link>
            <guid>11</guid>
            <pubDate>Thu, 18 Nov 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="status">Status<a class="hash-link" href="#status" title="Direct link to heading">​</a></h2><p>Accepted</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="context">Context<a class="hash-link" href="#context" title="Direct link to heading">​</a></h2><ul><li>To implement Hydra Head's ledger we have been working with the <a href="https://github.com/input-output-hk/cardano-ledger-specs" target="_blank" rel="noopener noreferrer">ledger-specs</a> packages which provide a low-level interface to work with transactions and ledgers<ul><li>We also use a lightly wrapped ledger-specs API as our interface for Off-chain transaction submission. This introduced some boilerplate in order to align with cardano-api and provide JSON serialisation.</li></ul></li><li>In our initial experiments <a href="/hydra-poc/adr/10">connecting directly</a> to a cardano node we have also been using the ledger API for building transactions for want of some scripts-related features in the cardano-api</li><li>cardano-api is expected to be the supported entrypoint for clients to interact with Cardano chain while ledger-specs is reserved for internal use and direct interactions with ledgers</li><li>cardano-api now provides all the features we need to run our on-chain validators</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="decision">Decision<a class="hash-link" href="#decision" title="Direct link to heading">​</a></h2><p><em>Therefore</em></p><ul><li>Use cardano-api types and functions instead of ledger-specs in <code>Hydra.Chain.Direct</code> component</li><li>Use cardano-api types instead of custom ones in <code>Hydra.Ledger.Cardano</code> component</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="consequences">Consequences<a class="hash-link" href="#consequences" title="Direct link to heading">​</a></h2><ul><li>Removes the boilerplate in <code>Hydra.Ledger.Cardano</code> required to map cardano-api types sent by clients to builtin and ledger-specs types</li><li>Simplifies the  <code>Hydra.Chain.Direct</code> component:<ul><li>Replaces custom transaction building in <code>Tx</code></li><li>Replaces custom transaction fees calculation and balancing in <code>Wallet</code></li><li>Replace low-level connection establishment using cardano-api functions connecting to the node (keeping the chain sync subscription)</li></ul></li></ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[12. Top-down Test-driven Design
]]></title>
            <link>https://input-output-hk.github.io/hydra-poc/adr/12</link>
            <guid>12</guid>
            <pubDate>Thu, 25 Nov 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="status">Status<a class="hash-link" href="#status" title="Direct link to heading">​</a></h2><p>Draft</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="context">Context<a class="hash-link" href="#context" title="Direct link to heading">​</a></h2><ul><li><a href="https://en.wikipedia.org/wiki/Test-driven_development" target="_blank" rel="noopener noreferrer">Test-Driven Development</a> or <em>Test-Driven Design</em> is a technique that helps team promotes simple and loosely coupled design, reduces the amount of code written, increases confidence in delivered software by providing a high level of code coverage by regression tests, and improves development speed through shorter feedback loop</li><li>While initially focused on <em>unit tests</em>, TDD has evolved over time to include higher-level tests like <a href="https://en.wikipedia.org/wiki/Behavior-driven_development" target="_blank" rel="noopener noreferrer">Behaviour Driven Development</a> or <a href="https://en.wikipedia.org/wiki/Specification_by_example" target="_blank" rel="noopener noreferrer">Specification by Example</a>, leading to comprehensive strategies like the <a href="http://tpierrain.blogspot.com/2021/03/outside-in-diamond-tdd-1-style-made.html" target="_blank" rel="noopener noreferrer">Outside-In Diamond TDD</a></li><li>Being a foundational part of scalable applications based on Cardano blockchain, Hydra Head needs to be released early, often, and with high assurance in order to benefit from early adopters' feedback</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="decision">Decision<a class="hash-link" href="#decision" title="Direct link to heading">​</a></h2><p><em>Therefore</em></p><p>We start as early as possible with <em>End-to-End</em> tests, gradually making them more complex as we develop the various components but starting with something simple (like a system-level but dummy chain and hydra network).</p><p>We flesh out other integration tests as needed, when we refine the technological stack used for the various bits and pieces.</p><p>We do most of our work in the <em>Executable Specifications</em> layer while we are developing the core domain functions, eg. the Head protocol. The rationale being this is the level at which we can test the most complex behaviours in the fastest and safest possible way as we everything runs without external dependencies or can even run as pure code using io-sim.</p><p>We tactically drop to <em>Unit tests</em> level when dealing with the protocol's "fine prints".</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="consequences">Consequences<a class="hash-link" href="#consequences" title="Direct link to heading">​</a></h2><ul><li>Development of each "feature", whether new or change to existing one, should start with a test defined at the highest level possible, but no higher</li><li>A detailed presentation of the various testing layers is available in the <a href="https://github.com/input-output-hk/hydra-poc/wiki/Testing-Strategy" target="_blank" rel="noopener noreferrer">wiki</a></li></ul>]]></content:encoded>
            <category>Draft</category>
        </item>
        <item>
            <title><![CDATA[13. Plutus Contracts Testing Strategy
]]></title>
            <link>https://input-output-hk.github.io/hydra-poc/adr/13</link>
            <guid>13</guid>
            <pubDate>Wed, 19 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="status">Status<a class="hash-link" href="#status" title="Direct link to heading">​</a></h2><p>Draft</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="context">Context<a class="hash-link" href="#context" title="Direct link to heading">​</a></h2><ul><li>We are implementing our custom (<a href="/hydra-poc/adr/10">Direct</a>) interaction w/ Cardano blockchain and not using the PAB nor the <code>Contract</code> monad to define off-chain contract code</li><li>This implies we cannot use the <a href="https://github.com/input-output-hk/plutus-apps/blob/main/plutus-contract/src/Plutus/Contract/Test.hs" target="_blank" rel="noopener noreferrer">official</a> testing framework for Contracts which relies on <code>Contract</code> monad and emulator traces nor the <a href="https://plutus-apps.readthedocs.io/en/latest/plutus/tutorials/contract-testing.html" target="_blank" rel="noopener noreferrer">QuickCheck based framework</a></li><li>We want to follow our <a href="/hydra-poc/adr/12">Test-Driven Development</a> approach for contracts as this is a critical part of Hydra</li><li>On-Chain Validators need not only to be correct and functional, but also secure and hardened against malicious parties</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="decision">Decision<a class="hash-link" href="#decision" title="Direct link to heading">​</a></h2><p><em>Therefore</em></p><ul><li>We test-drive single contracts code using <em>Mutation-Based Property Testing</em></li><li>Contracts are tested through the construction of actual <em>transactions</em> and running phase-2 ledger validation process</li><li>We start from a "healthy" transaction, that's expected to be correct and stay so</li><li>Contract code is initially <code>const True</code> function that validates any transaction</li><li>We flesh the contract's code piecemeal through the introduction of <em>Mutations</em> that turn a healthy transaction into an expectedly invalid one</li><li>We gradually build a set of combinators and generators that make it easier to mutate arbitrarily transactions, and combine those mutations</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="consequences">Consequences<a class="hash-link" href="#consequences" title="Direct link to heading">​</a></h2><ul><li>We make the contracts' <em>Threat model</em>  explicit through the tests we write, which should help future auditors' work</li><li>We'll need an additional layer of tests to exercise the Hydra OCV State Machine through <em>sequence of transactions</em>. This could be implemented using <a href="https://github.com/input-output-hk/plutus-apps/tree/main/quickcheck-dynamic" target="_blank" rel="noopener noreferrer">quickcheck-dynamic</a> library, or other tools that are currently being developed by the Cardano community</li></ul>]]></content:encoded>
            <category>Draft</category>
        </item>
        <item>
            <title><![CDATA[14. Token usage in Hydra Scripts
]]></title>
            <link>https://input-output-hk.github.io/hydra-poc/adr/14</link>
            <guid>14</guid>
            <pubDate>Mon, 14 Feb 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="status">Status<a class="hash-link" href="#status" title="Direct link to heading">​</a></h2><p>Accepted</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="context">Context<a class="hash-link" href="#context" title="Direct link to heading">​</a></h2><ul><li>The Hydra on-chain-verification scripts are used to validate Hydra protocol transactions and ensure they are lawful.</li><li>At least these three properties need to be enforced:<ul><li>Authentication: ensure that only Head participants can, for example, <code>abort</code> a Head</li><li>Contract continuity: ensure that a Head was <code>init</code>ialized before it can be opened by a <code>collectCom</code> tx.</li><li>Completeness: ensure that all Head participants had chance to <code>commit</code> funds to a Head.</li></ul></li><li>The Hydra Head paper introduces <strong>participation tokens (PT)</strong> and a <strong>state thread token (ST)</strong> for that matter.</li><li>Such tokens (a.k.a native assets) are identified by the <code>CurrencySymbol</code>, that is the hash of their <code>MintingPolicyScript</code> (a.k.a <code>PolicyID</code> in the ledger), and a <code>ByteString</code>, the socalled <code>TokenName</code> (a.k.a as <code>AssetName</code> in the ledger, see <a href="https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/specs.shelley-ma/latest/download-by-type/doc-pdf/shelley-ma#subsection.3.2" target="_blank" rel="noopener noreferrer">shelley-ma ledger spec</a>)</li><li>There can be multiple Hydra Heads on a network and a <code>hydra-node</code> need to distinguish individual Head instances or even (later) keep track of multiple Heads. Concretely, this means that we need to infer a Head identifier (<code>HeadId</code>) from observing each of the Hydra protocol transactions. </li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="decision">Decision<a class="hash-link" href="#decision" title="Direct link to heading">​</a></h2><ul><li>We solve both challenges by defining that ST and PTs <strong>shall use the same</strong> <code>MintingPolicyScript</code> and thus have same <code>CurrencySymbol</code></li><li>The <code>MintingPolicyScript</code> shall be parameterized by <code>TxOutRef</code> to yield a unique <code>CurrencySymbol</code> per Head
(similar to the <a href="https://github.com/input-output-hk/plutus/tree/1efbb276ef1a10ca6961d0fd32e6141e9798bd11/plutus-use-cases/src/Plutus/Contracts/Currency.hs" target="_blank" rel="noopener noreferrer"><code>OneShotCurrency</code></a> example)</li><li>ST and one PT per participant are minted in the <code>initTx</code></li><li>The <code>TokenName</code> of the ST can be any well-known <code>ByteString</code>, e.g. <code>"HydraHeadV1"</code></li><li>The <code>TokenName</code> of the PTs needs to be the <code>PubKeyHash</code> of the respective participant</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="consequences">Consequences<a class="hash-link" href="#consequences" title="Direct link to heading">​</a></h2><ul><li><p>Heads can be identified by looking for the <code>ST</code> in <code>init</code>, <code>collectCom</code>, <code>close</code>, <code>contest</code> or <code>fanout</code> transactions, or the <code>PT</code> in <code>commit</code> transactions. In both cases, the <code>CurrencySymbol == HeadId</code></p></li><li><p>Our scripts become simpler as we only need to check that ST/PT are paid forward, instead of needing to check datums</p></li><li><p>The datum produced by <code>commit</code> txs (and consumed by <code>collectCom</code>) is <code>Just SerializedTxOut</code>, which is simpler than also keeping the participant which committed in the datum (compare to full life-cycle of <a href="https://github.com/input-output-hk/hydra-poc/tree/0.3.0/docs/images/on-chain-full.jpg" target="_blank" rel="noopener noreferrer">0.3.0</a>).</p></li><li><p>The <code>v_head</code> script validator does not need to be parameterized, which makes discovering new Heads (and also tracking them for metrics) easier as the address to watch for is common to all Heads (of the same <code>v_head</code> version).</p></li><li><p>The <code>v_head</code> script (path) for the abort life-cycle can be implemented already much safer by checking that all PTs are burned on the <code>abort</code> transaction (counting inputs in abort life-cycle of <a href="https://github.com/input-output-hk/hydra-poc/tree/0.3.0/docs/images/on-chain-abort.jpg" target="_blank" rel="noopener noreferrer">0.3.0</a>).</p></li><li><p>Updated diagrams for the <a target="_blank" href="/hydra-poc/assets/files/on-chain-full-45a503c4856ec4e25e6b267103440aa3.jpg">full</a> and <a target="_blank" href="/hydra-poc/assets/files/on-chain-abort-c3483946d3116662c5cabfd67e3dde4e.jpg">abort</a> on-chain life-cycles of a Hydra Head.</p></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="follow-up-questions">Follow-up questions<a class="hash-link" href="#follow-up-questions" title="Direct link to heading">​</a></h2><ul><li>What value does the <code>ST</code> actually add? We could always look for the <code>PT</code> to identify a Head and contract continuity would already be achieved by the <code>PT</code>s!</li></ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
    </channel>
</rss>